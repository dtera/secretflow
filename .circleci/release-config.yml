# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
parameters:
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Event:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  linux_publish:
    docker:
      - image: registry.hub.docker.com/secretflow/release-ci:latest
    resource_class: 2xlarge
    parameters:
      python_ver:
        type: string
    shell: /bin/bash --login -eo pipefail
    steps:
      - checkout
      - run:
          name: "build package and publish"
          command: |
            conda create -n build python=<< parameters.python_ver >> -y
            conda activate build

            python3 setup.py bdist_wheel
            python3 setup.py clean
            python3 setup.py bdist_wheel --lite

            ls dist/*.whl
            python3 -m pip install twine
            python3 -m twine upload -r pypi -u __token__ -p ${PYPI_TWINE_TOKEN} dist/*.whl
  macOS_x64_publish:
    macos:
      xcode: 14.2
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
    resource_class: macos.x86.medium.gen2
    parameters:
      python_ver:
        type: string
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            brew install bazelisk cmake ninja nasm libomp wget
      - run:
          name: Install Miniconda
          command: |
            wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O ~/miniconda.sh
            bash ~/miniconda.sh -b -p $HOME/miniconda
            source $HOME/miniconda/bin/activate
            conda init bash zsh
      - run:
          name: "build package and publish"
          command: |
            conda create -n build python=<< parameters.python_ver >> -y
            conda activate build

            python3 setup.py bdist_wheel
            python3 setup.py clean
            python3 setup.py bdist_wheel --lite

            ls dist/*.whl
            python3 -m pip install twine
            python3 -m twine upload -r pypi -u __token__ -p ${PYPI_TWINE_TOKEN} dist/*.whl
  macOS_arm64_publish:
    macos:
      xcode: 14.2
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
    resource_class: macos.m1.large.gen1
    parameters:
      python_ver:
        type: string
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            brew install bazel cmake ninja libomp wget
            (cd /opt/homebrew/Cellar/bazel/*.*.*/libexec/bin && curl -fLO https://github.com/bazelbuild/bazel/releases/download/5.4.1/bazel-5.4.1-darwin-arm64 && chmod +x bazel-5.4.1-darwin-arm64)
      - run:
          name: Install Miniconda
          command: |
            wget https://repo.anaconda.com/miniconda/Miniconda3-py38_23.1.0-1-MacOSX-arm64.sh -O ~/miniconda.sh
            bash ~/miniconda.sh -b -p $HOME/miniconda
            source $HOME/miniconda/bin/activate
            conda init bash zsh
      - run:
          name: "build package and publish"
          command: |
            conda create -n build python=<< parameters.python_ver >> -y
            conda activate build

            python3 setup.py bdist_wheel
            python3 setup.py clean
            python3 setup.py bdist_wheel --lite

            ls dist/*.whl
            python3 -m pip install twine
            python3 -m twine upload -r pypi -u __token__ -p ${PYPI_TWINE_TOKEN} dist/*.whl
  docker_image_publish:
    docker:
      - image: cimg/deploy:2023.06.1
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            # Install miniconda
            wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
            bash Miniconda3-latest-Linux-x86_64.sh -b

            # get version first
            printf "from datetime import date\ntoday = date.today()\ndstr = today.strftime(\"%%Y%%m%%d\")\n__version__ = __version__.replace(\"\$\$DATE\$\$\", dstr)\nprint(__version__)" >> secretflow/version.py
            VERSION=$(~/miniconda3/bin/python secretflow/version.py)

            # restore changed file
            git checkout secretflow/version.py

            # login docker
            docker login -u secretflow -p ${DOCKER_DEPLOY_TOKEN}

            # Build base image
            BASE_IMAGE=$(head -1 docker/release/python.Dockerfile|tr -d ' #')
            NOT_EXIST=$(docker manifest inspect $BASE_IMAGE > /dev/null 2>&1; echo $?)
            if [ $NOT_EXIST -eq 1 ]
            then
              echo "building base image: $BASE_IMAGE"
              docker build -t $BASE_IMAGE -f docker/release/python.Dockerfile .
              docker push $BASE_IMAGE
            fi

            # Build image
            cd docker/release
            bash ./build.sh -l -v ${VERSION}

            # login docker - aliyun
            docker login -u ${ALIYUN_DOCKER_USERNAME} -p ${ALIYUN_DOCKER_PASSWORD} secretflow-registry.cn-hangzhou.cr.aliyuncs.com

            # secretflow-anolis8:${VERSION}
            docker tag secretflow/secretflow-anolis8:${VERSION} secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/secretflow-anolis8:${VERSION}
            docker push secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/secretflow-anolis8:${VERSION}

            # secretflow-anolis8:latest
            docker tag secretflow/secretflow-anolis8:${VERSION} secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/secretflow-anolis8:latest
            docker push secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/secretflow-anolis8:latest

            # secretflow-lite-anolis8:${VERSION}
            docker tag secretflow/secretflow-lite-anolis8:${VERSION} secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/secretflow-lite-anolis8:${VERSION}
            docker push secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/secretflow-lite-anolis8:${VERSION}

            # secretflow-lite-anolis8:latest
            docker tag secretflow/secretflow-lite-anolis8:${VERSION} secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/secretflow-lite-anolis8:latest
            docker push secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/secretflow-lite-anolis8:latest


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  publish:
    jobs:
      - linux_publish:
          matrix:
            parameters:
              # python_ver: ["3.8", "3.9", "3.10", "3.11"]
              python_ver: ["3.8"]
      - macOS_x64_publish:
          matrix:
            parameters:
              python_ver: ["3.8"]
      - macOS_arm64_publish:
          matrix:
            parameters:
              python_ver: ["3.8"]
      - docker_image_publish:
          requires:
            - linux_publish
